#pragma kernel WaveKernel
#pragma kernel WaveToMultiWaveKernel
#pragma kernel WaveToRippleKernel
#pragma kernel WaveToSphereKernel
#pragma kernel WaveToDeformedSphereKernel
#pragma kernel WaveToTwistingTorusKernel

#pragma kernel MultiWaveToWaveKernel
#pragma kernel MultiWaveKernel
#pragma kernel MultiWaveToRippleKernel
#pragma kernel MultiWaveToSphereKernel
#pragma kernel MultiWaveToDeformedSphereKernel
#pragma kernel MultiWaveToTwistingTorusKernel

#pragma kernel RippleToWaveKernel
#pragma kernel RippleToMultiWaveKernel
#pragma kernel RippleKernel
#pragma kernel RippleToSphereKernel
#pragma kernel RippleToDeformedSphereKernel
#pragma kernel RippleToTwistingTorusKernel

#pragma kernel SphereToWaveKernel
#pragma kernel SphereToMultiWaveKernel
#pragma kernel SphereToRippleKernel
#pragma kernel SphereKernel
#pragma kernel SphereToDeformedSphereKernel
#pragma kernel SphereToTwistingTorusKernel

#pragma kernel DeformedSphereToWaveKernel
#pragma kernel DeformedSphereToMultiWaveKernel
#pragma kernel DeformedSphereToRippleKernel
#pragma kernel DeformedSphereToSphereKernel
#pragma kernel DeformedSphereKernel
#pragma kernel DeformedSphereToTwistingTorusKernel

#pragma kernel TwistingTorusToWaveKernel
#pragma kernel TwistingTorusToMultiWaveKernel
#pragma kernel TwistingTorusToRippleKernel
#pragma kernel TwistingTorusToSphereKernel
#pragma kernel TwistingTorusToDeformedSphereKernel
#pragma kernel TwistingTorusKernel

#define PI 3.14159265358979323846

RWStructuredBuffer<float3> _Positions;
uint _Resolution;
float _Step, _Time, _TransitionProgress;

float2 GetUV(uint3 id)
{
    return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition(uint3 id, float3 position)
{
    if (id.x < _Resolution && id.y < _Resolution)
    {
        _Positions[id.x + id.y * _Resolution] = position;
    }
}

float3 Wave(float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.y = sin(PI * (u + v + t));
    p.z = v;
    return p;
}

float3 MultiWave(float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.y = sin(PI * (u + t));
    p.y += sin(2.0 * PI * (v + t)) * 0.5;
    p.y += sin(PI * (u + v + 0.25 * t));
    p.y *= 0.4;
    p.z = v;
    return p;
}

float3 Ripple(float u, float v, float t)
{
    float d = sqrt(u * u + v * v);

    float3 p;
    p.x = u;
    p.y = sin(PI * (4.0 * d - t));
    p.y /= (1.0 + 10.0 * d);
    p.z = v;
    return p;
}

float3 Sphere(float u, float v, float t)
{
    float r = 0.9 + 0.5 * sin(PI * t);
    float s = r * cos(0.5 * PI * v);
    float3 p;
    p.x = s * sin(PI * u);
    p.y = r * sin(PI * 0.5 * v);
    p.z = s * cos(PI * u);
    return p;
}

float3 DeformedSphere(float u, float v, float t)
{
    float r = 0.9 + 0.1 * sin(PI * (12.0 * u + 8.0 * v + t));
    float s = r * cos(0.5 * PI * v);
    float3 p;
    p.x = s * sin(PI * u);
    p.y = r * sin(PI * 0.5 * v);
    p.z = s * cos(PI * u);
    return p;
}

float3 TwistingTorus(float u, float v, float t)
{
    float r1 = 0.7 + 0.1 * sin(PI * (8.0 * u + 0.5 * t));
    float r2 = 0.15 + 0.05 * sin(PI * (16.0 * u + 8.0 * v + 3.0 * t));
    float s = r1 + r2 * cos(PI * v);
    float3 p;
    p.x = s * sin(PI * u);
    p.y = r2 * sin(PI * v);
    p.z = s * cos(PI * u);
    return p;
}

#define KERNEL_FUNCTION(function) \
[numthreads(8, 8, 1)] \
void function##Kernel(uint3 id: SV_DispatchThreadID) \
{ \
    float2 uv = GetUV(id); \
    SetPosition(id, function(uv.x, uv.y, _Time)); \
}

KERNEL_FUNCTION(Wave)
KERNEL_FUNCTION(MultiWave)
KERNEL_FUNCTION(Ripple)
KERNEL_FUNCTION(Sphere)
KERNEL_FUNCTION(DeformedSphere)
KERNEL_FUNCTION(TwistingTorus)

#define KERNEL_MORPH_FUNCTION(functionA, functionB) \
[numthreads(8, 8, 1)] \
void functionA##To##functionB##Kernel(uint3 id: SV_DispatchThreadID) \
{ \
    float2 uv = GetUV(id); \
    float3 position = lerp( \
        functionA(uv.x, uv.y, _Time), \
        functionB(uv.x, uv.y, _Time), \
        _TransitionProgress \
    ); \
    SetPosition(id, position); \
}

KERNEL_MORPH_FUNCTION(Wave, MultiWave)
KERNEL_MORPH_FUNCTION(Wave, Ripple)
KERNEL_MORPH_FUNCTION(Wave, Sphere)
KERNEL_MORPH_FUNCTION(Wave, DeformedSphere)
KERNEL_MORPH_FUNCTION(Wave, TwistingTorus)

KERNEL_MORPH_FUNCTION(MultiWave, Wave)
KERNEL_MORPH_FUNCTION(MultiWave, Ripple)
KERNEL_MORPH_FUNCTION(MultiWave, Sphere)
KERNEL_MORPH_FUNCTION(MultiWave, DeformedSphere)
KERNEL_MORPH_FUNCTION(MultiWave, TwistingTorus)

KERNEL_MORPH_FUNCTION(Ripple, Wave)
KERNEL_MORPH_FUNCTION(Ripple, MultiWave)
KERNEL_MORPH_FUNCTION(Ripple, Sphere)
KERNEL_MORPH_FUNCTION(Ripple, DeformedSphere)
KERNEL_MORPH_FUNCTION(Ripple, TwistingTorus)

KERNEL_MORPH_FUNCTION(Sphere, Wave)
KERNEL_MORPH_FUNCTION(Sphere, MultiWave)
KERNEL_MORPH_FUNCTION(Sphere, Ripple)
KERNEL_MORPH_FUNCTION(Sphere, DeformedSphere)
KERNEL_MORPH_FUNCTION(Sphere, TwistingTorus)

KERNEL_MORPH_FUNCTION(DeformedSphere, Wave)
KERNEL_MORPH_FUNCTION(DeformedSphere, MultiWave)
KERNEL_MORPH_FUNCTION(DeformedSphere, Ripple)
KERNEL_MORPH_FUNCTION(DeformedSphere, Sphere)
KERNEL_MORPH_FUNCTION(DeformedSphere, TwistingTorus)

KERNEL_MORPH_FUNCTION(TwistingTorus, Wave)
KERNEL_MORPH_FUNCTION(TwistingTorus, MultiWave)
KERNEL_MORPH_FUNCTION(TwistingTorus, Ripple)
KERNEL_MORPH_FUNCTION(TwistingTorus, Sphere)
KERNEL_MORPH_FUNCTION(TwistingTorus, DeformedSphere)
